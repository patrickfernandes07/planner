// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entity {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  movements   Movement[]
  accounts    Account[]
  users       User[]
  contacts    Contact[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  entityId    Int       @unique
  entity      Entity    @relation(fields: [entityId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  movements   Movement[]
}

model Account {
  id          Int      @id @default(autoincrement())
  name        String
  entityId    Int      @unique
  entity      Entity   @relation(fields: [entityId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  movements   Movement[]
}

model Contact {
  id          Int      @id @default(autoincrement())
  name        String
  entityId    Int      @unique
  entity      Entity   @relation(fields: [entityId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  movements   Movement[]
}

model Movement {
  id          Int      @id @default(autoincrement())
  description String
  value       Float
  dueDate     DateTime
  payDate     DateTime?
  contactId   Int      @unique
  contact     Contact  @relation(fields: [contactId], references: [id])
  entityId    Int      @unique
  entity      Entity   @relation(fields: [entityId], references: [id])
  accountId   Int      @unique
  account     Account  @relation(fields: [accountId], references: [id])
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
